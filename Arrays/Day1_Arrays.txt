Binary Search:Sorted Array Searching:

def binary_search(arr,low,high,key):
    mid = int(low + (high - low)/2)
    if key == arr[mid]:
        return mid
    if key < arr[mid]:
        return binary_search(arr,low,mid-1,key)
    if key > arr[mid]:
        return binary_search(arr,mid+1,high,key)

    return -1
	
Sorted Array Inserting:

A = [1,2,3,4,6,7,8,9]
n= len(A)
def insert_Sorted(arr,n,key,capacity):
    if n >= capacity:
        return n
    i = n - 1
    while i >= 0 and arr[i] > key:
        arr[i+1] = arr[i]
        i -= 1
    arr[i+1] = key
    return n + 1

for j in range(9):
    A.append(0)
capacity = len(A)
print(insert_Sorted(A,n,5,capacity))
print(A)

Sorted Array Deletion:

A = [1,2,3,4,5,6,7,8,9]
n= len(A)
def binary_search(arr,low,high,key):
    mid = int(low + (high - low)/2)
    if key == arr[mid]:
        return mid
    elif key < arr[mid]:
        return binary_search(arr,low,mid-1,key)
    elif key > arr[mid]:
        return binary_search(arr,mid+1,high,key)
    else:
        return -1

def delete_Sorted(arr,n,key):
    pos = binary_search(arr,0,n-1,key)
    if pos == -1:
        return n
    for i in range(pos,n-1):
        arr[i] = arr[i+1]
    return n-1


print(delete_Sorted(A,n,4))
print(A)

Coding Question in Array Searching:
Q.1.Find the element that appears once in an array where every other element appears twice:
Normal Efficient Approach:
A = [7, 3, 5, 4, 5, 3, 4]
n= len(A)
def find_single(arr):
    dict = {}
    for i in arr:
        if i in dict:
            dict[i] += 1
        else:
            dict[i] = 1
    for key,val in dict.items():
        if val == 1:
            res = key
    return res

print(find_single(A))

XOR Efficient Approach:
A = [7, 3, 5, 4, 5, 3, 4]
def find_single(arr):
    res = arr[0]
    for i in range(1,len(arr)):
        res = res ^ arr[i]
    return res

print(find_single(A))


Q.2.Find the only repetitive element between 1 to n-1
using sum:
A = [1, 3, 2, 3, 4]
B = [1, 5, 1, 2, 3, 4]
def find_rep(arr):
    res = sum(arr) - ((len(arr)-1)*len(arr))//2
    return res

print(find_rep(A))
print(find_rep(B))

Using Hashing:
A = [1, 3, 2, 3, 4]
B = [1, 5, 1, 2, 3, 4]
def find_rep(arr):
    res = set()
    for ele in arr:
        if ele in res:
            return ele
        res.add(ele)
    return -1

print(find_rep(A))
print(find_rep(B))

Using XOR:
A = [1, 3, 2, 3, 4]
B = [1, 5, 1, 2, 3, 4]
def find_rep(arr):
    res = 0
    for i in range(0,len(arr)-1):
        res = res ^ (i+1) ^ arr[i]
    res = res ^ arr[len(arr)-1]
    return res

print(find_rep(A))
print(find_rep(B))

Q.3.Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum)
Using Sorting and Two Pointer:
A = [0, -1, 2, -3, 1]
B = [1, -2, 1, 0, 5]
def find_sumpair(arr,x):
    arr.sort()
    l = 0
    r = len(arr)-1
    while l < r:
        if arr[l]+arr[r] == x:
            return (arr[l],arr[r])
        elif arr[l]+arr[r] < x:
            l += 1
        elif arr[l]+arr[r] > x:
            r -= 1
    return -1
x = -2
print(find_sumpair(A,x))
x = 0
print(find_sumpair(B,x))

using hasmap:
A = [0, -1, 2, -3, 1]
B = [1, -2, 1, 0, 5]
def find_sumpair(arr,x):
    map = {}
    for i in range(0,len(arr)):
        temp = x - arr[i]
        if temp in map:
            return (arr[i],temp)
        map[arr[i]] = i
    return -1

x = -2
print(find_sumpair(A,x))
x = 0
print(find_sumpair(B,x))

Q.4.Find a triplet that sum to a given value
using sorting and two pointer:
A = [12, 3, 4, 1, 6, 9]
B = [1, 2, 3, 4, 5]
def find_sum_triplet(arr,x):
    for i in range(0,len(arr)-1):
        l = i+1
        r = len(arr)-1
        while l < r:
            if arr[i]+arr[l]+arr[r]==x:
                return (arr[i],arr[l],arr[r])
            elif arr[i]+arr[l]+arr[r] < x:
                l+=1
            elif arr[i]+arr[l]+arr[r] > x:
                r -= 1
    return -1

x = 24
print(find_sum_triplet(A,x))
x = 9
print(find_sum_triplet(B,x))

using hashmap:

A = [12, 3, 4, 1, 6, 9]
B = [1, 2, 3, 4, 5]
def find_sum_triplet(arr,x):
    for i in range(0,len(arr)-1):
        map = set()
        temp = x - arr[i]
        for j in range(i+1,len(arr)):
            if temp - arr[j] in map:
                return (arr[i],arr[j],temp-arr[j])
            map.add(arr[j])
    return -1

x = 24
print(find_sum_triplet(A,x))
x = 9
print(find_sum_triplet(B,x))

Q.5. Write a function which takes an array and prints the majority element (if it exists), otherwise prints “No Majority Element”. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element).

using hashmap:
A = [3, 3, 4, 2, 4, 4, 2, 4, 4]
B = [3, 3, 4, 2, 4, 4, 2, 4]
def find_majority(arr):
    map = {}
    for i in arr:
        if i in map:
            map[i] += 1
        else:
            map[i] = 1
    for key in map:
        if map[key] > len(arr)//2:
            return key
    return -1

print(find_majority(A))
print(find_majority(B))

Using Sorting:
A = [3, 3, 4, 2, 4, 4, 2, 4, 4]
B = [3, 3, 4, 2, 4, 4, 2, 4]
def find_majority(arr):
    arr.sort()
    count = 1
    for i in range(len(arr)-1):
        if arr[i]==arr[i+1]:
            count += 1
        else:
            count = 1
        if count > len(arr)//2:
            return arr[i]
    return -1

print(find_majority(A))
print(find_majority(B))

Q.6. Equilibrium index of an array

using normal approach:
A = [-7, 1, 5, 2, -4, 3, 0]
B = [1, 2, 3]
def equilibrium_index(arr):
    total = sum(arr)
    leftsum = 0
    for i,ele in enumerate(arr):
        total -= ele
        if total == leftsum:
            return i
        leftsum += ele
    return -1

print(equilibrium_index(A))
print(equilibrium_index(B))

using binary search:
A = [-7, 1, 5, 2, -4, 3, 0]
B = [1, 2, 3]
def equilibrium_index(arr):
    mid = len(arr)//2
    leftsum = 0
    rightsum = 0
    for i in range(mid):
        leftsum += arr[i]
    for j in range(len(arr)-1, mid, -1):
        rightsum += arr[j]
    if leftsum == rightsum:
        return mid
    elif leftsum > rightsum:
        while leftsum > rightsum and mid > 0:
            rightsum += arr[mid]
            leftsum -= arr[mid-1]
            mid -= 1
    else:
        while rightsum > leftsum and mid < len(arr)-1:
            leftsum += arr[mid]
            rightsum -= arr[mid+1]
            mid += 1
    if leftsum == rightsum:
        return mid
    else:
        return -1

print(equilibrium_index(A))
print(equilibrium_index(B))

Q.7. Given a sorted array and a value x, the ceiling of x is the smallest element in an array greater than or equal to x, and the floor is the greatest element smaller than or equal to x. Assume that the array is sorted in non-decreasing order. Write efficient functions to find the floor and ceiling of x. 

Using Linear Search:
A = [1, 2, 8, 10, 10, 12, 19]
B = [1, 2, 3]
def ceil_search(arr,low,high,x):
    if x <= arr[low]:
        return low
    i = low
    for i in range(high):
        if arr[i]==x:
            return arr[i]
        elif (arr[i] < x) and (arr[i+1]>= x):
            return arr[i+1]
    return -1
x = 3
print(ceil_search(A,0,len(A)-1,x))
x = 4
print(ceil_search(B,0,len(B)-1,x))

using binary search:
A = [1, 2, 8, 10, 10, 12, 19]
B = [1, 2, 3]
def ceil_search(arr,low,high,x):
    if x == 0:
        return -1
    while low <= high:
        mid = int(low + (high-low)/2)
        if arr[mid]==x:
            return arr[mid]
        elif x < arr[mid]:
            high = mid-1
        else:
            low = mid+1
    if low <= len(arr)-1:
        return arr[low]
    return -1

x = 3
print(ceil_search(A,0,len(A)-1,x))
x = 4
print(ceil_search(B,0,len(B)-1,x))

Q.8.Given an array of integers. Find a peak element in it. An array element is a peak if it is NOT smaller than its neighbours. For corner elements, we need to consider only one neighbour. 

using Normal Approach:
A = [5, 10, 20, 15]
B = [10, 20, 15, 2, 23, 90, 67]
def find_peak(arr):
    if len(arr)==1:
        return arr[0]
    if arr[0]>=arr[1]:
        return arr[0]
    if arr[len(arr)-1] >= arr[len(arr)-2]:
        return arr[len(arr)-1]
    for i in range(1,len(arr)-1):
        if arr[i] >= arr[i-1] and arr[i]>=arr[i+1]:
            return arr[i]

print(find_peak(A))
print(find_peak(B))


using binary search:
A = [5, 10, 20, 15]
B = [10, 20, 15, 2, 23, 90, 67]
def find_peak(arr):
    l = 0
    r = len(arr)-1
    while l <= r:
        mid = (l+r)>>1
        if (mid==0 or (arr[mid-1]<=arr[mid])) and ((mid==len(arr)-1) or (arr[mid+1]<=arr[mid])):
            break
        if mid > 0 and arr[mid-1] > arr[mid]:
            r = mid - 1
        else:
            l = mid + 1
    return arr[mid]

print(find_peak(A))
print(find_peak(B))


Q.9.Given an unsorted array arr of nonnegative integers and an integer sum, find a continuous subarray which adds to a given sum. There may be more than one subarrays with sum as the given sum, print first such subarray. 

A = [1, 4, 20, 3, 10, 5]
B = [1, 4, 0, 0, 3, 10, 5]
C = [1, 4]
def subarray_sum(arr,x):
    l = 0
    curr_sum = arr[0]
    i = 1
    while i <= len(arr):
        while curr_sum > x and l < i-1:
            curr_sum -= arr[l]
            l += 1
        if curr_sum == x:
            return arr[l:i]
        if i < len(arr):
            curr_sum += arr[i]
        i += 1
    return -1

x = 33
print(subarray_sum(A,x))
x=7
print(subarray_sum(B,x))
x = 0
print(subarray_sum(C,x))

Q.10.Write a program to print all the LEADERS in the array. An element is leader if it is greater than all the elements to its right side. And the rightmost element is always a leader. For example in the array {16, 17, 4, 3, 5, 2}, leaders are 17, 5 and 2. 
Let the input array be arr[] and size of the array be size.
A = [16, 17, 4, 3, 5, 2]
B = [1, 4, 0, 0, 3, 10, 5]
C = [1, 4]
def find_leader(arr):
    maxi = arr[len(arr)-1]
    print(maxi, end=' ')
    for i in range(len(arr)-2,-1,-1):
        if maxi < arr[i]:
            print(arr[i],end=' ')
            maxi = arr[i]



print(find_leader(A))
print(find_leader(B))
print(find_leader(C))

Q.11.Given an array of positive integers. All numbers occur an even number of times except one number which occurs an odd number of times. Find the number in O(n) time & constant space.
using hashmap:
A = [1, 2, 3, 2, 3, 1, 3]
B = [5, 7, 2, 7, 5, 2, 5]
C = [1, 4, 1, 4]
def find_oddnum(arr):
    map = {}
    for i in arr:
        if i in map:
            map[i] += 1
        else:
            map[i] = 1
    for key in map:
        if map[key]%2 != 0:
            return key
    return -1

print(find_oddnum(A))
print(find_oddnum(B))
print(find_oddnum(C))

using XOR:
A = [1, 2, 3, 2, 3, 1, 3]
B = [5, 7, 2, 7, 5, 2, 5]
C = [1, 4, 1, 4]
def find_oddnum(arr):
    res = 0
    for ele in arr:
        res = res ^ ele
    return res

print(find_oddnum(A))
print(find_oddnum(B))
print(find_oddnum(C))

Q.12.You are given a list of n-1 integers and these integers are in the range of 1 to n. There are no duplicates in the list. One of the integers is missing from the list. Write an efficient code to find the missing integer.
using sum:
A = [1, 2, 4, 6, 3, 7, 8]
B = [1, 2, 3, 5]
C = [1, 2,3,4,5,7]
def find_missing(arr):
    sum_array = sum(arr)
    sum_natural = (len(arr)+1)*(len(arr)+2)//2
    return sum_natural - sum_array

print(find_missing(A))
print(find_missing(B))
print(find_missing(C))

using XOR:
A = [1, 2, 4, 6, 3, 7, 8]
B = [1, 2, 3, 5]
C = [1, 2,3,4,5,7]
def find_missing(arr):
    x1 = arr[0]
    x2 = 1
    for i in range(1,len(arr)):
        x1 =  x1^arr[i]

    for i in range(2,len(arr)+2):
        x2 = x2 ^ i

    return x1^x2

print(find_missing(A))
print(find_missing(B))
print(find_missing(C))

Q.13.An element in a sorted array can be found in O(log n) time via binary search. But suppose we rotate an ascending order sorted array at some pivot unknown to you beforehand. So for instance, 1 2 3 4 5 might become 3 4 5 1 2. Devise a way to find an element in the rotated array in O(log n) time.
using binary search:
A = [5, 6, 7, 8, 9, 10, 1, 2, 3]
B = [5, 6, 7, 8, 9, 10, 1, 2, 3]
C = [30, 40, 50, 10, 20]
def find_sorted_rotated(arr,l,h,x):
    if l > h:
        return -1
    mid = int(l+(h-l)//2)
    if arr[mid]==x:
        return mid
    if arr[l] <= arr[mid]:
        if x >= arr[l] and x <= arr[mid]:
            return find_sorted_rotated(arr,l,mid-1,x)
        return find_sorted_rotated(arr,mid+1,h,x)
    if x >= arr[mid] and x <= arr[h]:
        return find_sorted_rotated(arr,mid+1,h,x)
    return find_sorted_rotated(arr,l,mid-1,x)
key = 3
print(find_sorted_rotated(A,0,len(A)-1,key))
key = 30
print(find_sorted_rotated(B,0,len(B)-1,key))
key = 10
print(find_sorted_rotated(C,0,len(C)-1,key))

Q.14.A step array is an array of integers where each element has a difference of at most k with its neighbor. Given a key x, we need to find the index value of x if multiple-element exist to return the first occurrence of the key.
A = [4, 5, 6, 7, 6]
B = [20, 40, 50, 70, 70, 60]
C = [30, 40, 50, 10, 20]
def find_adkdiff(arr,k,x):
    i = 0
    while i < len(arr):
        if arr[i]==x:
            return i
        i = i+max(1, int(abs(arr[i]-x)/k))
    return -1

k , x= 1 , 6
print(find_adkdiff(A,k,x))
k,x = 20,60
print(find_adkdiff(B,k,x))

Q.15.Given three arrays sorted in non-decreasing order, print all common elements in these arrays.
A = [1, 5, 10, 20, 40, 80]
B = [6, 7, 20, 80, 100]
C = [3, 4, 15, 20, 30, 70, 80, 120]
def find_common(arr1,arr2,arr3):
    i,j,k = 0,0,0
    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        if arr1[i]==arr2[j] and arr2[j]==arr3[k]:
            print(arr1[i], end=' ')
            i+=1
            j+=1
            k+=1

        elif arr1[i] < arr2[j]:
            i += 1
        elif arr2[j] < arr3[k]:
            j += 1
        else:
            k += 1


print(find_common(A,B,C))
ar1 = [1, 5, 5]
ar2 = [3, 4, 5, 5, 10]
ar3 = [5, 5, 10, 20]
print(find_common(ar1,ar2,ar3))






